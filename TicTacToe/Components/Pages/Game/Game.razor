@page "/game/{jugador1Id:int}/{jugador2Id:int}"
@using TicTacToe.DAL
@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@rendermode InteractiveServer
@inject MovimientosService movimientosService

<!-- PANTALLA DE JUEGO -->

<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">
    <div class="game-container">
        <h2 class="game-status">@GameStatus</h2>
        <div class="game-screen">
            <div class="game-board">
                @for (var i = 0; i < 9; i++)
                {
                    var cellIndex = i; // Copia local para evitar problemas con el closure en el lambda
                                       <button class="cell @GetPlayerClass(board[cellIndex])"
                                               @onclick="() => HandleCellClick(cellIndex)"
                                               disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                                           @GetSymbol(board[cellIndex])
                                       </button>
                }
            </div>
            <button class="btn btn-secondary mt-4" @onclick="RestartGame">
                Reiniciar Juego
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public int jugador1Id { get; set; }
    [Parameter] public int jugador2Id { get; set; }

    private Jugadores? jugadorX;
    private Jugadores? jugadorO;

    protected override async Task OnInitializedAsync()
    {
        jugadorX = await jugadoresService.Buscar(jugador1Id);
        jugadorO = await jugadoresService.Buscar(jugador2Id);
        _currentPlayerType = jugadorX;
    }
    private Partidas Partida = new Partidas();
    private Jugadores?[] board = new Jugadores?[9];
    private Jugadores? _currentPlayerType;
    private Jugadores? winner;
    private bool esEmpate;
    private string GameStatus
    {
        get
        {
            if (winner != null)
                return $"🏆 ¡Ganador: {winner.JugadorName}!";
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {(_currentPlayerType == jugadorX ? jugadorX?.JugadorName: jugadorO?.JugadorName)}";
        }
    }



    private async Task HandleCellClick(int index)
    {
        // Ignorar si la celda está ocupada o el juego terminó
        if (board[index] != null || winner != null || esEmpate)
            return;

        board[index] = _currentPlayerType;

        // Cambiar turno
        _currentPlayerType = (_currentPlayerType?.JugadorId == jugadorX?.JugadorId) ? jugadorO : jugadorX;
        Partida.TurnoJugadorId = _currentPlayerType?.JugadorId ?? 0;

        StateHasChanged();

        if(Partida.PartidaId==0)
        {
            Partida.Jugador1Id = jugadorX?.JugadorId ?? 0;
            Partida.Jugador2Id = jugadorO?.JugadorId ?? 0;
            Partida.EstadoPartida = EstadosPartida.EnProgreso;
            Partida.TurnoJugadorId = _currentPlayerType?.JugadorId ?? 0;
            Partida.EstadoTablero = "---------";
            Partida.FechaInicio = DateTime.UtcNow;

            await partidasService.Guardar(Partida);

            var partidas = await partidasService.Listar(p =>
            p.Jugador1Id == Partida.Jugador1Id &&
            p.Jugador2Id == Partida.Jugador2Id &&
            p.FechaInicio == Partida.FechaInicio);

            Partida.PartidaId = partidas.FirstOrDefault()?.PartidaId ?? 0;
        }

        int fila = index / 3;
        int columna = index % 3;

        var movimiento = new Movimientos
            {
                PartidaId = Partida.PartidaId,
                JugadorId = _currentPlayerType?.JugadorId ?? 0,
                PosicionFila = fila,
                PosicionColumna = columna,
                FechaMovimiento = DateTime.UtcNow

            };
        await movimientosService.Guardar(movimiento);

        Partida.EstadoTablero = string.Join("", board.Select(c => c == null ? " " : (c == jugadorX ? "X" : "O")));
        //await partidasService.Guardar(Partida);

        @*Verificar Ganador*@
        winner = CheckForWinner();
        if (winner != null)
        {
            @*Actualizar tabla de Jugadores*@
            winner.Victorias++;
            var perdedor = (winner == jugadorX) ? jugadorO : jugadorX;
            if (perdedor != null) perdedor.Derrotas++;

            @*Actualizar tabla de partidas*@
            Partida.EstadoPartida = EstadosPartida.Finalizada;
            Partida.GanadorId = winner.JugadorId;
            Partida.FechaFin = DateTime.UtcNow;

            await partidasService.Guardar(Partida);
            if (jugadorX != null) await jugadoresService.Guardar(jugadorX);
            if (jugadorO != null) await jugadoresService.Guardar(jugadorO);
            return; // El juego termina
        }

        // Comprobar empate
        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            if (jugadorX != null) jugadorX.Empates++;
            if (jugadorO != null) jugadorO.Empates++;

            Partida.EstadoPartida = EstadosPartida.Empate;
            Partida.FechaFin = DateTime.UtcNow;

            await partidasService.Guardar(Partida);
            if (jugadorX != null) await jugadoresService.Guardar(jugadorX);
            if (jugadorO != null) await jugadoresService.Guardar(jugadorO);
            return; // El juego termina
        }

        await partidasService.Guardar(Partida);
    }

    private Jugadores? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a] != null && board[a]?.JugadorId == board[b]?.JugadorId && board[a]?.JugadorId == board[c]?.JugadorId)
            {
                return board[a];
            }
        }

        return null; // No hay ganador
    }

    private async Task RestartGame()
    {

        var nuevaPartida = new Partidas
        {
            Jugador1Id = jugadorX?.JugadorId ?? 0,
            Jugador2Id = jugadorO?.JugadorId ?? 0,
            EstadoPartida = EstadosPartida.EnEspera,
            TurnoJugadorId = jugadorX?.JugadorId ?? 0,
            GanadorId = null,
            EstadoTablero = "---------",
            FechaInicio = DateTime.Now,
            FechaFin = null
        };

        board = new Jugadores?[9];
        _currentPlayerType = jugadorX;
        winner = null;
        esEmpate = false;

        await partidasService.Guardar(Partida);
    }

    private string GetPlayerClass(Jugadores? jugador)
    {
        if (jugador==null) return "";
        return jugador.JugadorId == jugadorX?.JugadorId ?"player-x" : "player-o";
    }

    private string GetSymbol(Jugadores? jugador)
    {
        if (jugador == null) return "";
        return jugador.JugadorId == jugadorX?.JugadorId? "X" : "O";
    }
}