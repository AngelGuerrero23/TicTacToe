@page "/Jugador/Index"
@using TicTacToe.Models
@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<link href="app.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<PageTitle>Jugadores</PageTitle>

<div class="card shadow">
    <!-- Header -->
    <div class="card-header text-black">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Listado de Jugadores</h3>
        </div>
        <div class="row mt-3">
            <div class="col-3">
                <label class="col-form-label"><strong>Filtrar por</strong></label>
            </div>
            <div class="col-4">
                <label class="col-form-label"><strong>Búsqueda</strong></label>
            </div>
        </div>
        <div class="row align-items-center">
            <div class="col-3">
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option value="" selected disabled>Elija una opción</option>
                    <option value="Jugador">Jugador</option>
                    <option value="Partidas">Partidas</option>
                </InputSelect>
            </div>
            <div class="col-4">
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscar"/>
                    <button type="button" class="btn btn-outline-dark" @onclick="Buscar">
                        <i class="fa fa-search"></i> Buscar
                    </button>
                </div>
            </div>
            <div class="col-5">
                <a href="/Jugador/Create" class="btn btn-success">
                    <span class="bi bi-plus-circle"></span> Crear Nuevo
                </a>
            </div>
        </div>
    </div>

    <!-- Body -->
    <div class="card-body p-0">
        @if (ListaJugadores == null)
        {
            <p class="m-3"><em>Cargando jugadores...</em></p>
        }
        else if (!ListaJugadores.Any())
        {
            <div class="alert alert-info m-3">No hay jugadores registrados.</div>
        }
        else
        {
            <table class="table table-striped table-bordered mb-0">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Victorias</th>
                        <th>Derrotas</th>
                        <th>Empates</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var jugador in ListaJugadores)
                    {
                        <tr>
                            <td>@jugador.JugadorId</td>
                            <td>@jugador.JugadorName</td>
                            <td>@jugador.Victorias</td>
                            <td>@jugador.Derrotas</td>
                            <td>@jugador.Empates</td>
                            <td>
                                <button class="bi bi-pencil-square btn-primary me-2"
                                        @onclick="() => Editar(jugador.JugadorId)">
                                </button>
                                <button class="bi bi-trash btn-danger"
                                        @onclick="() => Eliminar(jugador.JugadorId)">
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <!-- Footer -->
    @if (ListaJugadores != null && ListaJugadores.Any())
    {
        <div class="card-footer text-end">
            <span class="me-3">Cantidad: @ListaJugadores.Count()</span>
            <span class="me-3">Victorias: @ListaJugadores.Sum(v => v.Victorias)</span>
            <span class="me-3">Derrotas: @ListaJugadores.Sum(d => d.Derrotas)</span>
            <span>Empates: @ListaJugadores.Sum(e => e.Empates)</span>
        </div>
    }
</div>

@code {
    public List<Jugadores>? ListaJugadores { get; set; } = new List<Jugadores>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "Jugador")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorName.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == "Partidas")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Victorias.ToString().Contains(ValorFiltro.ToLower()));
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.Listar(e => e.JugadorId > 0);
        }
    }
    private void Editar(int id)
    {
        navigationManager.NavigateTo($"/Jugador/Edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        try
        {
            var eliminado = await jugadoresService.Eliminar(id);
            if (eliminado)
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}