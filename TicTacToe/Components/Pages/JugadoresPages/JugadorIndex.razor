@page "/Jugador/Index"
@using TicTacToe.Models
@inject JugadoresService jugadoresService

@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* MainLayout.razor *@
<link href="app.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<PageTitle>Jugadores</PageTitle>

<h3 class="mb-3">Listado de Jugadores</h3>

@if (ListaJugadores == null)
{
    <p><em>Cargando jugadores...</em></p>
}
else if (!ListaJugadores.Any())
{
    <div class="alert alert-info">No hay jugadores registrados.</div>
}
else
{
    @*labels*@
    <div class="row">
        @*Filtrar por*@
        <div class="col-3">
            <label class="col-form-label"><strong>Filtrar por</strong></label>
        </div>

        @*ValorFiltro*@
        <div class="col-4">
            <label class="col-form-label"><strong>B&Uacute;squeda</strong></label>
        </div>
    </div>

    @*Inputs y botones*@
    <div class="row align-items-center">
        @*filtro*@
        <div class="col-3">
            <InputSelect class="form-select" @bind-Value="Filtro">
                <option value="" selected disabled>Elija una opcion</option>
                <option value="Jugador">Jugador</option>
                <option value="Partidas">Partidas</option>
            </InputSelect>
        </div>

        @*Busqueda*@
        <div class="col-4">
            <div class="input-group">
                <input class="form-control" @bind="ValorFiltro" placeholder="Buscar"/>
                <button type="button" class="btn btn-outline-primary" @onclick="Buscar">
                    <i class="fa fa-search"></i> Buscar
                </button>
            </div>
        </div>

    </div>

    <table class="table table-striped table-bordered shadow-sm">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Partidas</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var jugador in ListaJugadores)
            {
                <tr>
                    <td>@jugador.JugadorId</td>
                    <td>@jugador.JugadorName</td>
                    <td>@jugador.partida</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2"
                                @onclick="() => Editar(jugador.JugadorId)">
                            Editar
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => Eliminar(jugador.JugadorId)">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-3">
    <a href="/Jugador/Create" class="btn btn-success">
        <span class="bi bi-plus-circle"></span> Crear Nuevo
    </a>
</div>

@code {
    public List<Jugadores>? ListaJugadores { get; set; } = new List<Jugadores>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    private async Task Buscar()
    {
        if(ValorFiltro.Trim().ToLower()!="")
        {
            if(Filtro == "Jugador")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorName.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if(Filtro == "Partidas")
            {
                ListaJugadores = await jugadoresService.Listar(j => j.partida.ToString().Contains(ValorFiltro.ToLower()));
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.Listar(e => e.JugadorId > 0);
        }
    }
    private void Editar(int id)
    {
        navigationManager.NavigateTo($"/Jugador/Edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        try
        {
            var eliminado = await jugadoresService.Eliminar(id);
            if (eliminado)
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
                //StateHasChanged();
            }
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}