@page "/Jugador/Edit/{id:int}"

@using Microsoft.AspNetCore.Components.Forms
@using TicTacToe.Models
@inject TicTacToe.Services.JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* MainLayout.razor *@
<link href="app.css" rel="stylesheet" />

<PageTitle>Editar Jugador</PageTitle>

@if (Jugador == null)
{
    <p>Cargando jugador...</p>
}
else
{
    <EditForm Model="Jugador" OnValidSubmit="Modificar" FormName="EditarJugadorForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="card shadow-lg">
                <div class="card-header text-center">
                    <h5 class="card-title">Editar Jugador</h5>
                </div>

                <div class="card-body">
                    <!-- JugadorId -->
                    <div class="mb-3">
                        <label class="form-label"><strong>JugadorId</strong></label>
                        <InputNumber class="form-control" @bind-Value="Jugador.JugadorId" readonly />
                    </div>

                    <!-- JugadorName -->
                    <div class="mb-3">
                        <label class="form-label"><strong>JugadorName</strong></label>
                        <InputText class="form-control" @bind-Value="Jugador.JugadorName" />
                        <ValidationMessage For="() => Jugador.JugadorName" />
                    </div>

                    @*Victorias*@
                    <div class="mb-3">
                        <label class="form-label"><strong>Victorias</strong></label>
                        <InputNumber class="form-control" @bind-value="Jugador.Victorias"></InputNumber>
                        <ValidationMessage For="(() => Jugador.Victorias)"></ValidationMessage>
                    </div>
                    @*Derrotas*@
                    <div class="mb-3">
                        <label class="form-label"><strong>Derrotas</strong></label>
                        <InputNumber class="form-control" @bind-Value="Jugador.Derrotas"></InputNumber>
                        <ValidationMessage For="(() => Jugador.Derrotas)"></ValidationMessage>
                    </div>
                    @*Empates*@
                    <div class="mb-3">
                        <label class="form-label"><strong>Empates</strong></label>
                        <InputNumber class="form-control" @bind-Value="Jugador.Empates"></InputNumber>
                        <ValidationMessage For="(() => Jugador.Empates)"></ValidationMessage>
                    </div>
                </div>

                <!-- Footer -->
                <div class="card-footer text-center mt-2">
                    <a href="/Jugador/Index" class="btn btn-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <span class="bi bi-floppy"></span> Guardar
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    public Jugadores Jugador { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Jugador = await jugadoresService.Buscar(id);
    }

    private async Task Modificar()
    {
        var guardado = await jugadoresService.Modificar(Jugador);

        if (guardado)
            navigationManager.NavigateTo("/Jugador/Index");
    }
}


