@page "/Partidas/Create"
@using Microsoft.EntityFrameworkCore
@using TicTacToe.DAL
@using Microsoft.AspNetCore.Components
@inject PartidasService partidasService
@inject JugadoresService jugadoresService
@rendermode InteractiveServer
@inject NavigationManager navigationManager

@*MainLayout.razor*@
<link href="app.css" rel="stylesheet"/>

<PageTitle>Crear Partida</PageTitle>

<EditForm Model="Partida" OnValidSubmit="Guardar" FormName="FormPartida">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Partida</h5>
            </div>

            <div class="card-body">

                @* PartidaId *@
                <div class="mb-3">
                    <label class="form-label"><strong>PartidaId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Partida.PartidaId" readonly />
                </div>

                @* Jugador1 *@
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 1</strong></label>
                    <InputSelect class="form-control" @bind-Value="Partida.Jugador1Id">
                        <option value="">-- Seleccione un jugador --</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId">@jugador.JugadorName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Partida.Jugador1Id" />
                </div>

                @* Jugador2 *@
                <div class="mb-3">
                    <label class="form-label"><strong>Jugador 2</strong></label>
                    <InputSelect class="form-control" @bind-Value="Partida.Jugador2Id">
                        <option value="">-- Seleccione un jugador --</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId">@jugador.JugadorName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Partida.Jugador2Id" />
                </div>

                @* EstadoTablero *@
                <div class="mb-3">
                    <label class="form-label"><strong>Estado Tablero</strong></label>
                    <InputText class="form-control" @bind-Value="Partida.EstadoTablero" />
                    <ValidationMessage For="() => Partida.EstadoTablero" />
                </div>

                @* EstadoPartida *@
                <div class="mb-3">
                    <label class="form-label"><strong>Estado Partida</strong></label>
                    <InputSelect class="form-control" @bind-Value="Partida.EstadoPartida">
                        <option value="" disabled>Elija una opción</option>
                        <option value="En Espera">En Espera</option>
                        <option value="En Progreso">En Progreso</option>
                        <option value="Finalizada">Finalizada</option>
                        <option value="Empate">Empate</option>
                    </InputSelect>
                    <ValidationMessage For="() => Partida.EstadoPartida" />
                </div>

                @* TurnoJugadorId *@
                <div class="mb-3">
                    <label class="form-label"><strong>Turno Jugador</strong></label>
                    <InputSelect class="form-control" @bind-Value="Partida.TurnoJugadorId">
                        <option value="">-- Seleccione un jugador --</option>
                        @foreach (var jugador in ListaJugadores)
                        {
                            <option value="@jugador.JugadorId">@jugador.JugadorName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Partida.TurnoJugadorId" />
                </div>

                @if (ShowAlert)
                {
                    <div class="alert @AlertType mt-3" role="alert">
                        @Mensaje
                    </div>
                }
            </div>

            @** Footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Partidas/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary">
                    <span class="bi bi-floppy"></span> Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public Partidas Partida { get; set; } = new Partidas();
    public string Mensaje { get; set; } = string.Empty;

    public List<Jugadores> ListaJugadores { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        Partida.EstadoTablero = "---------";
    }

    public async Task Guardar()
    {

        if(Partida.Jugador1Id== Partida.Jugador2Id && Partida.Jugador2Id !=0)
        {
            Mensaje = "Jugador 1 y Jugador 2 no pueden ser le mismo";
            ShowAlert = true;
            return;
        }
        var creado = await partidasService.Guardar(Partida);

        if (creado)
        {
            Mensaje = "¡Partida agregada exitosamente!";
            AlertType = "alert-success";
            ShowAlert = true;
            Partida = new Partidas();
        }
        else
        {
            ShowAlert = false;
            Mensaje = "No se pudo guardar";
        }
    }

    private bool ShowAlert = false;
    private string AlertType = "alert-danger";
}
