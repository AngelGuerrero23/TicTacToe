@page "/Partidas/Index"
@using TicTacToe.Models;
@inject PartidasService partidasService

@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* MainLayout.razor *@
<link href="app.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


<PageTitle>Partidas</PageTitle>

<div class="card shadow">
    <!-- Header -->
    <div class="card-header  text-black">
        <h3 class="mb-0">Listado de Partidas</h3>
        <div class="row mt-2">
            <div class="col-3">
                <label class="col-form-label"><strong>Filtrar por</strong></label>
            </div>
            <div class="col-4">
                <label class="col-form-label"><strong>Búsqueda</strong></label>
            </div>
        </div>
        <div class="row align-items-center">
            <div class="col-3">
                <InputSelect class="form-select" @bind-Value="Filtro">
                    <option value="" selected disabled>Elija una opción</option>
                    <option value="PartidaId">Partida Id</option>
                    <option value="Jugador1Id">Jugador 1</option>
                    <option value="Jugador2Id">Jugador 2</option>
                    <option value="EstadoPartida">Estado Partida</option>
                    <option value="GanadorId">Ganador</option>
                    <option value="FechaInicio">Fecha Inicio</option>
                    <option value="FechaFin">Fecha Fin</option>
                </InputSelect>
            </div>
            <div class="col-4">
                <div class="input-group">
                    <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                    <button type="button" class="btn btn-outline-dark" @onclick="Buscar">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
            </div>
            <div class="col-4">
                <a href="/Partidas/Create" class="btn btn-success">
                    <span class="bi bi-plus-circle"></span> Crear Nueva Partida
                </a>
            </div>
        </div>
    </div>

    <!-- Body -->
    <div class="card-body p-0">
        <table class="table table-striped table-bordered mb-0">
            <thead class="table-dark">
                <tr>
                    <th>PartidaId</th>
                    <th>Jugador1</th>
                    <th>Jugador2</th>
                    <th>EstadoPartida</th>
                    <th>EstadoTablero</th>
                    <th>Ganador</th>
                    <th>FechaInicio</th>
                    <th>FechaFin</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var partida in ListaPartidas)
                {
                    <tr>
                        <td>@partida.PartidaId</td>
                        <td>@partida.Jugador1.JugadorName</td>
                        <td>@partida.Jugador2.JugadorName</td>
                        <td>@partida.EstadoPartida</td>
                        <td>@partida.EstadoTablero</td>
                        <td>@(partida.Ganador != null ? partida.Ganador.JugadorName : "Sin ganador")</td>
                        <td>@partida.FechaInicio.ToLocalTime().ToString("yyyy-MM-dd hh:mm")</td>
                        <td>@(partida.FechaFin.HasValue? partida.FechaFin.Value.ToLocalTime().ToString("yyyy-MM-dd hh:mm"):"")</td>
                        <td>
                            <button class="bi bi-pencil-square btn-primary me-2"
                                    @onclick="() => Editar(partida.PartidaId)">
                            </button>
                            <button class="bi bi-trash btn-danger"
                                    @onclick="() => Eliminar(partida.PartidaId)">
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Footer -->
    <div class="card-footer text-end">
        Cantidad: @ListaPartidas.Count()
    </div>
</div>


@code {
    public List<Partidas>? ListaPartidas { get; set; } = new List<Partidas>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaPartidas = await partidasService.Listar(p => p.PartidaId > 0);
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(ValorFiltro))
        {   ListaPartidas = await partidasService.Listar(p => p.PartidaId > 0);
            return;
        }

        string filtroValor = ValorFiltro.ToLower();

        if (Filtro == "PartidaId")
            ListaPartidas = await partidasService.Listar(p => p.PartidaId.ToString().Contains(filtroValor));
        else if (Filtro == "Jugador1Id")
            ListaPartidas = await partidasService.Listar(p => p.Jugador1Id.ToString().Contains(filtroValor));
        else if (Filtro == "Jugador2Id")
            ListaPartidas = await partidasService.Listar(p => p.Jugador2Id.ToString().Contains(filtroValor));
        else if (Filtro == "EstadoPartida")
            ListaPartidas = await partidasService.Listar(p => p.EstadoPartida.ToLower().Contains(filtroValor));
        else if (Filtro == "GanadorId")
            ListaPartidas = await partidasService.Listar(p => p.GanadorId.ToString().Contains(filtroValor));
        else if (Filtro == "FechaInicio")
            ListaPartidas = await partidasService.Listar(p => p.FechaInicio.ToString().ToLower().Contains(filtroValor));
        else if (Filtro == "FechaFin")
            ListaPartidas = await partidasService.Listar(p => p.FechaFin.ToString()!.ToLower().Contains(filtroValor));
        else
            ListaPartidas = await partidasService.Listar(p => p.PartidaId > 0);
    }

    private void Editar(int id)
    {
        navigationManager.NavigateTo($"/Partidas/Edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        var eliminado = await partidasService.Eliminar(id);
        if (eliminado)
            ListaPartidas = await partidasService.Listar(p => p.PartidaId > 0);
    }
}